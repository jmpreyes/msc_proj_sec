model UNIVERSITY

@Rank = automatic
class Module
attributes
	code:			Integer
	credit:			Integer
	year: 			Integer
	description:	Integer
end

@Rank = automatic
class Person
attributes
	age:			Integer
	mature:			Boolean
	name:			Integer
end

@Rank = automatic
class Student < Person
attributes
	id:				Integer
	year:			Integer
end

@Rank = 3
association study between
	Student [1..1] role student
	Module [0..*] role modules
end

constraints

@Person{Rank = automatic}
context Person
	inv: Person.allInstances()->forAll(p|p.age>0 and p.age<18)

@Student{Rank = automatic}
context Student
	inv: self.age > 18
	inv: self.year>=1 and self.year<=6
	inv: Student.allInstances()->forAll(s1,s2:Student|s1<>s2 implies s1.id <> s2.id)
	inv: Student.allInstances()->forAll(s1|s1.modules->forAll(m1|s1.year=m1.year))
	inv: Student.allInstances()->exists(s|s.year=6) and Student.allInstances()->exists(s|s.year<6)
	@Rank = 8
	inv: Student.allInstances()->forAll(s|s.modules->notEmpty())

@Module{Rank = automatic}
context Module
	inv: self.year>=1 and self.year<=5

module QueryA6
	select *.*, *:*:* with *::* as q0
	select Person.*, Person:*:* as q1
	select *.*@5 as q2
	select Student.*, Student:*:* with Student::inv2, Student::inv3 but Student::*@8 as q3
	select Module.* inject {Module.allInstances()->forAll(m|m.credit>0)@8} as q4
	select Person.*, Student.*, Student:*:*@1 as q5
	select Student.year, Student:study:Module with Student::inv2, Student::inv7@8 as q6
	select Module.code with Module::* inject {Module.allInstances()->forAll(m|m.code>0)} as q7
	select only Module with Module::inv8 as q8
	select Student.* with Student::* but Student::inv7@8 + select Module.* with Module::* as q9
end