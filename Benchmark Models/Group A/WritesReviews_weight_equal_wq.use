model WritesReviews
--a simple demo model taken from Initiating a Benchmark for UML and OCL Analysis Tools
--WritesReviews (WR)

class Paper
attributes
	wordCount:	Integer
	studentPaper: Boolean
end

class Researcher
attributes
	isStudent:	Boolean
end

@Rank = 1
association Writes between
	Paper [0..1] role manuscript
	Researcher [1..2] role author
end

@Rank = 1
association Reviews between
	Paper [0..1] role submission
	Researcher [3] role referee
end

constraints
@Researcher{Rank = 1}
context Researcher
	inv: Researcher.allInstances()->forAll(r|r.manuscript->size()=1)
	inv: Researcher.allInstances()->forAll(r|r.submission->size()=1)
	inv: Researcher.allInstances()->forAll(r|r.submission->excludes(r.manuscript))

@Paper{Rank = 1}
context Paper
	inv: self.wordCount < 10000
	inv: Paper.allInstances()->forAll(p|p.studentPaper=p.author->exists(x|x.isStudent))
	inv: Paper.allInstances()->forAll(p|p.referee->forAll(r|not r.isStudent))
--	inv: Paper.allInstances()->exists(p|p.studentPaper) and Paper.allInstances()->select(p|p.studentPaper)->size < 5

module QueryA7
	select Researcher.*, Researcher:*:Paper with Researcher::* as q0
	select Paper.*, Paper:*:Researcher with Paper::* but Paper::inv6 as q1
	select Paper.* with Paper::inv4 inject {Paper.allInstances()->forAll(p|p.wordCount>0)} as q2
	select Researcher.* with Researcher::* inject 
		{Researcher.allInstances()->forAll(r|r.submission->size()>0)} as q3 
	select Researcher.* with Researcher::* inject {
		Researcher.allInstances()->forAll(r|Paper.allInstances()->forAll(p|r.isStudent=true implies p.studentPaper=true))} as q4
	select only Researcher with Researcher::* but Researcher::inv1 as q5
	select *:Writes:* & select *:Reviews:* as q6
	select only Paper with Paper::* inject {Paper.allInstances()->exists(p|p.studentPaper)} as q7
	select *.isStudent with *::* but Paper::* as q8
	select Researcher.* with Researcher::* & select Paper.* with Paper::* but Paper::inv6 as q9
end