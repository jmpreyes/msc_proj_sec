model model_groupB_1_Rank_equal

enum Enum0 { Enum0Elem0, Enum0Elem1, Enum0Elem2 } 

enum Enum1 { Enum1Elem0, Enum1Elem1, Enum1Elem2, Enum1Elem3, Enum1Elem4, Enum1Elem5, Enum1Elem6, Enum1Elem7, Enum1Elem8, Enum1Elem9 } 

@Rank = 1
class Class0 < Class1,Class6
attributes 
	Class0BoolAttr0 : Boolean 
	Class0BoolAttr1 : Boolean 
	Class0BoolAttr2 : Boolean 
	Class0IntAttr3 : Integer 
	Class0IntAttr4 : Integer 
	Class0EnumAttr5 : Enum0 
end 

@Rank = 1
class Class1 < Class7
attributes 
	Class1BoolAttr0 : Boolean 
	Class1BoolAttr1 : Boolean 
	Class1BoolAttr2 : Boolean 
	Class1IntAttr3 : Integer 
	Class1IntAttr4 : Integer 
	Class1EnumAttr5 : Enum1 
end 

@Rank = 1
class Class2 < Class3
attributes 
	Class2BoolAttr0 : Boolean 
	Class2BoolAttr1 : Boolean 
	Class2BoolAttr2 : Boolean 
	Class2IntAttr3 : Integer 
	Class2IntAttr4 : Integer 
	Class2EnumAttr5 : Enum1 
end 

@Rank = 1
class Class3 < Class11
attributes 
	Class3BoolAttr0 : Boolean 
	Class3BoolAttr1 : Boolean 
	Class3BoolAttr2 : Boolean 
	Class3IntAttr3 : Integer 
	Class3IntAttr4 : Integer 
	Class3EnumAttr5 : Enum0 
end 

@Rank = 1
class Class4
attributes 
	Class4BoolAttr0 : Boolean 
	Class4BoolAttr1 : Boolean 
	Class4IntAttr2 : Integer 
	Class4IntAttr3 : Integer 
	Class4IntAttr4 : Integer 
	Class4EnumAttr5 : Enum0 
end 

@Rank = 1
class Class5
attributes 
	Class5BoolAttr0 : Boolean 
	Class5BoolAttr1 : Boolean 
	Class5IntAttr2 : Integer 
	Class5IntAttr3 : Integer 
	Class5IntAttr4 : Integer 
	Class5EnumAttr5 : Enum1 
end 

@Rank = 1
class Class6 < Class11
attributes 
	Class6BoolAttr0 : Boolean 
	Class6BoolAttr1 : Boolean 
	Class6IntAttr2 : Integer 
	Class6IntAttr3 : Integer 
	Class6IntAttr4 : Integer 
	Class6EnumAttr5 : Enum0 
end 

@Rank = 1
class Class7 < Class4
attributes 
	Class7BoolAttr0 : Boolean 
	Class7BoolAttr1 : Boolean 
	Class7IntAttr2 : Integer 
	Class7IntAttr3 : Integer 
	Class7IntAttr4 : Integer 
	Class7EnumAttr5 : Enum1 
end 

@Rank = 1
class Class8
attributes 
	Class8BoolAttr0 : Boolean 
	Class8BoolAttr1 : Boolean 
	Class8IntAttr2 : Integer 
	Class8IntAttr3 : Integer 
	Class8IntAttr4 : Integer 
	Class8EnumAttr6 : Enum0 
	Class8EnumAttr5 : Enum1 
end 

@Rank = 1
class Class9
attributes 
	Class9BoolAttr0 : Boolean 
	Class9BoolAttr1 : Boolean 
	Class9IntAttr2 : Integer 
	Class9IntAttr3 : Integer 
	Class9IntAttr4 : Integer 
	Class9EnumAttr5 : Enum1 
	Class9EnumAttr6 : Enum0 
end 

@Rank = 1
class Class10
attributes 
	Class10BoolAttr0 : Boolean 
	Class10BoolAttr1 : Boolean 
	Class10IntAttr2 : Integer 
	Class10IntAttr3 : Integer 
	Class10IntAttr4 : Integer 
	Class10EnumAttr5 : Enum0 
	Class10EnumAttr6 : Enum0 
end 

@Rank = 1
class Class11 < Class4
attributes 
	Class11BoolAttr0 : Boolean 
	Class11BoolAttr1 : Boolean 
	Class11IntAttr2 : Integer 
	Class11IntAttr3 : Integer 
	Class11IntAttr4 : Integer 
	Class11EnumAttr6 : Enum1 
	Class11EnumAttr5 : Enum0 
end 

@Rank = 1
class Class12 < Class3
attributes 
	Class12BoolAttr0 : Boolean 
	Class12BoolAttr1 : Boolean 
	Class12IntAttr2 : Integer 
	Class12IntAttr3 : Integer 
	Class12IntAttr4 : Integer 
	Class12EnumAttr6 : Enum1 
	Class12EnumAttr5 : Enum0 
end 

@Rank = 1
association Class0_Class2 between 
	Class0 [1] role role0
	Class2 [1] role role1
end 

@Rank = 1
association Class1_Class10 between 
	Class1 [1] role role2
	Class10 [1] role role3
end 

@Rank = 1
association Class2_Class5 between 
	Class2 [1] role role4
	Class5 [1] role role5
end 

@Rank = 1
association Class3_Class3 between 
	Class3 [1] role role6
	Class3 [1] role role7
end 

@Rank = 1
association Class5_Class9 between 
	Class5 [1] role role10
	Class9 [1] role role11
end 

constraints 

@Class0{Rank = 1} 
context Class0
	inv: self.Class0IntAttr4 >= 11
	inv: self.Class0IntAttr3 <> 13

@Class1{Rank = 1} 
context Class1
	inv: self.Class1IntAttr3 = 8
	inv: self.Class1IntAttr3 > 17

@Class2{Rank = 1} 
context Class2
	inv: self.Class2IntAttr4 < 0
	inv: self.Class2IntAttr3 >= 16

@Class3{Rank = 1} 
context Class3
	inv: self.Class3IntAttr3 <= 3
	inv: self.Class3IntAttr4 = 6

@Class4{Rank = 1} 
context Class4
	inv: self.Class4BoolAttr0 or self.Class4BoolAttr1 or self.Class4BoolAttr1 xor self.Class4BoolAttr0 or self.Class4EnumAttr5 = #Enum0Elem1

@Class5{Rank = 1} 
context Class5
	inv: self.Class5IntAttr3 <= 9 xor Class5.allInstances()->forAll( c5_1,c5_2 | c5_1.Class5IntAttr3 <> c5_2.Class5IntAttr2 )

@Class6{Rank = 1} 
context Class6
	inv: not self.Class6BoolAttr1
	inv: not self.Class6BoolAttr0

@Class7{Rank = 1} 
context Class7
	inv: self.Class7BoolAttr1
	inv: self.Class7BoolAttr0 xor self.Class7BoolAttr1

@Class8{Rank = 1} 
context Class8
	inv: Class8.allInstances()->forAll( c8_1,c8_2 | c8_1.Class8IntAttr3 > c8_2.Class8IntAttr2 ) 
	inv: Class8.allInstances()->forAll( c8_1,c8_2 | c8_1.Class8IntAttr4 <= c8_2.Class8IntAttr2 ) 
	inv: self.Class8BoolAttr1 or self.Class8BoolAttr0

@Class9{Rank = 1} 
context Class9
	inv: Class9.allInstances()->forAll( c9_1,c9_2 | c9_1.Class9IntAttr4 <> c9_2.Class9IntAttr3 ) 
	inv: Class9.allInstances()->forAll( c9_1,c9_2 | c9_1.Class9IntAttr4 <= c9_2.Class9IntAttr3 ) 
	inv: self.Class9BoolAttr1

@Class10{Rank = 1} 
context Class10
	inv: self.Class10EnumAttr6 = #Enum0Elem0
	inv: Class10.allInstances()->exists(c1 | c1.Class10BoolAttr1) 

@Class11{Rank = 1} 
context Class11
	inv: self.Class11EnumAttr6 <> #Enum1Elem9
	inv: Class11.allInstances()->forAll(c1 | c1.Class11EnumAttr5 = #Enum0Elem2) 
	inv: Class11.allInstances()->forAll(c_11|Class11.allInstances()->forAll(c_11|c_11<>c_11))

@Class12{Rank = 1} 
context Class12
	inv: self.Class12EnumAttr5 = #Enum0Elem2
	inv: Class12.allInstances()->forAll(c1,c2 | c1.Class12BoolAttr0 or c2.Class12BoolAttr1) 

-- query modules

module QueryAll
	select * as q0
	select *.* as q1
	select *:*:* as q2
	select *.*, *:*:* as q3
	select * with *::* as q4
	select *.*, *:*:* with *::* as q5
end

module QueryAtts
	select Class0.* as q0
	select Class1.* as q1
	select Class2.* as q2
	select Class3.* as q3
	select Class4.* as q4
	select Class5.* as q5
	select Class6.* as q6
	select Class7.* as q7
	select Class8.* as q8
	select Class9.* as q9
	select Class10.* as q10
	select Class11.* as q11
	select Class12.* as q12
end

module QueryAssocs
	select Class0:*:* as q0
	select Class1:*:* as q1
	select Class2:*:* as q2
	select Class3:*:* as q3
	select Class4:*:* as q4
	select Class5:*:* as q5
	select Class6:*:* as q6
	select Class7:*:* as q7
	select Class8:*:* as q8
	select Class9:*:* as q9
	select Class10:*:* as q10
	select Class11:*:* as q11
	select Class12:*:* as q12
	select *:*:* as q13
	select *:Class1_Class10:* as q14
	select *:Class0_Class2:*, *:Class3_Class3:* as q15
	select Class7:*:Class0 as q16
end

module QueryMods
	select only Class0, only Class2, only Class4 with Class0::*, Class2::*, Class4::* as q0
	select only Class1, only Class3, only Class5, only Class7, only Class9, only Class11 as q1
	-- select Class1, Class3, Class5, Class7, Class9, Class11 as q2
	select no Class7, * with *::* but Class10::*, Class11::*, Class12::* as q2
	select Class11.* with Class11::* but Class11::inv24 as q3
	-- inv: self.Class2IntAttr3 >= 16
	select Class2 with Class2::* inject 
		{Class2.allInstances()->forAll(c|c.Class2IntAttr3 >= 16 and c.Class2IntAttr3 <= 20)} as q4
	-- inv: self.Class3IntAttr3 <= 3
	select Class3 with Class3::* inject 
		{Class3.allInstances()->forAll(c|c.Class3IntAttr3 <> 2)} as q5
	select Class3.* with Class3::* + 
		select Class7.* with Class7::* as q6
	select Class0.*, Class1.*, Class2.* with Class0::*, Class1::*, Class2::* + 
		select Class9.*, Class10.*, Class11.* with Class9::*, Class10::*, Class11::* as q7
end
