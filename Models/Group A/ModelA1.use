model CivilStatus

enum Gender {male, female}
enum CivilStatus {single, married, divorced, widowed}

@Rank = 3
class Person
attributes
	name : Integer
	gender : Gender
	civstat : CivilStatus
operations
	spouse() : Person
end

@Rank = 3
association Marriage between
	Person [0..1] role husband
	Person [0..1] role wife
end

constraints

@PaperRank{Rank = 3}
context Person
inv: Person.allInstances()->forAll(p1,p2:Person|p1<>p2 implies p1.name <> p2.name)
inv: Person.allInstances()->forAll(p|p.gender=#male implies p.husband->isEmpty())
inv: Person.allInstances()->forAll(p|p.gender=#female implies p.wife->isEmpty())

-- query module

module QueryA1
	select Person.* as q0
	select Person.* with Person::* as q1
	select Person.name with Person::inv1 as q2
	select Person.gender, Person:*:* with Person::inv2, Person::inv3 as q3
	select *:Marriage:* as q4
	select Person.*, Person:*:* with Person::* but Person::inv2 as q5
end

-- Binary expressions to test at the terminal
-- QueryA1.q2 + QueryA1.q3
-- QueryA1.q2 - QueryA1.q3
-- QueryA1.q1 & QueryA2.q2
-- QueryA1.q3 & QueryA1.q4
