model WritesReviews
--a simple demo model taken from Initiating a Benchmark for UML and OCL Analysis Tools
--WritesReviews (WR)

class Paper
attributes
	wordCount:	Integer
	studentPaper:	Boolean
end

class Researcher
attributes
	isStudent:	Boolean
end

@Rank = 1
association Writes between
	Researcher [1..2] role author
	Paper [0..1] role manuscript
end

@Rank = 1
association Reviews between
	Researcher [3] role referee
	Paper [0..1] role submission
end

constraints
@Researcher{Rank = 1}
context Researcher
	inv: Researcher.allInstances()->forAll(r|r.manuscript->size()=1)
	inv: Researcher.allInstances()->forAll(r|r.submission->size()=1)
	inv: Researcher.allInstances()->forAll(r|r.submission->excludes(r.manuscript))

@Paper{Rank = 1}
context Paper
	inv: self.wordCount < 10000
	inv: Paper.allInstances()->forAll(p|p.studentPaper=p.author->exists(x|x.isStudent))
	inv: Paper.allInstances()->forAll(p|p.referee->forAll(r|not r.isStudent))
--	inv: Paper.allInstances()->exists(p|p.studentPaper) and Paper.allInstances()->select(p|p.studentPaper)->size < 5

-- query module

module QueryA4
	select Researcher.isStudent, Researcher:*:* with Researcher::* as q0
	select Paper.*, Paper:*:* with Paper::* as q1
	select *.isStudent with *::* but Paper::* as q2
	select Researcher.isStudent, Paper.studentPaper with Researcher::*, Paper::* as q3
	select Researcher.*, Paper.*, *:Writes:* with Researcher::*, Paper::* but Researcher::inv2, Paper::inv5 as q4
	-- testing failed binary expression
	--select Researcher.* + select Person.* as queryTest
end

-- Binary expressions to test using terminal
-- QueryA4.q0 + QueryA4.q1
-- QueryA4.q0 - QueryA4.q4
-- QueryA4.q3 & QueryA4.q4
-- QueryA4.q2 - QueryA4.q3 - QueryA4.q4
-- QueryA4.q0 + QueryA4.q2 & QueryA4.q4
